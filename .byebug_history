c
s
c
"d".class == String
"d".class == "tring
"d".class == "String"
"d".class
c
answer_submission.class == ActiveSupport::HashWithIndifferentAccess
answer_submission.class == "ActiveSupport::HashWithIndifferentAccess"
answer_submission.class
answer_submission
c
s
c
"
params[:attempt].values[0]["answer_text"].class == "ActiveSupport::HashWithIndifferentAccess
params[:attempt].values[0]["answer_text"].class
c
params[:attempt].values[0]["answer_text"].length
c
params[:attempt].values[0]["answer_text"].lengthc
params[:attempt].values[0]["answer_text"].length
params[:attempt].values[0]["answer_text"]
params[:attempt].values[0]
params[:attempt].values[0].length
params[:attempt].values.length
params[:attempt].values
c
params[:attempt].values
params[:attempt].values[0]["answer_text"]
params[:attempt].values[0]
params.[:attempt]
params.[:attempt].values[0]
params
c
@survey.methods
@survey.after_survey_content
@survey
c
params[:attempt].values[0]["answer_text"] = params[:attempt].values[0]["answer_text"].values.reject {|value| value == "0"}
c
params[:attempt].values[0]["answer_text"] = params[:attempt].values[0]["answer_text"].values.reject {|value| value == "0"}
c
params[:attempt].values[0]["answer_text"] = params[:attempt].values[0]["answer_text"].values.reject {|value| value == "0"}
params[:attempt].values[0]["answer_text"].values.reject {|value| value == "0"}
params[:attempt].values[0]["answer_text"].values
params[:attempt].values[0]["answer_text"]
params[:attempt].values[0][answer_text'
params[:attempt].values[0].answer_text
params[:attempt].values[0]
params[:attempt].values
params[:attempt].value
params[:attempt].values
params[:attempt]
:attempt
c
params
attempt_params
params["attempt"]["7"]["answer_text"]
params["attempt"]["7"]
params["attempt"]
params
attempt_params["7"]
params["7"]
params["7"]["answer_text"]
params["answer_text"]
attempt_params["answer_text"]
attempt_params
c
bat = eval(answer.answer_text).values.reject {|ans| ans == "0"}
bat = eval(answer.answer_text).values.reject {|ans| "0"}
bat = eval(answer.answer_text).values.filter {|ans| ans != "0"}
bat = eval(answer.answer_text).values.delete!("0")
bat
bat = eval(answer.answer_text).values.delete("0")
cat
cat = eval(answer.answer_text).values.delete("0")
c
c = eval(answer.answer_text).values.delete("0")
b = eval(answer.answer_text).values.delete("0")
ac
b = eval(answer.answer_text).values.delete("0")
a
a.delete("0")
a
a = eval(answer.answer_text).values
a
a = eval(answer.answer_text).values.delete("0")
eval(answer.answer_text).values.delete("0")
eval(answer.answer_text).values
eval(answer.answer_text)
c
eval(answer.answer_text).values
eval(answer.answer_text).each {|value| p value}
eval(answer.answer_text).each do
eval(answer.answer_text)["1"]
eval(answer.answer_text)["0"]
eval(answer.answer_text).class
eval(answer.answer_text)
answer.answer_text.gsub('"','')
eval(answer.answer_text.gsub('"',''))
Hash.inspect(answer.answer_text.gsub('"',''))
answer.answer_text.gsub('"','')
answer.answer_text.delete('\\"')
answer.answer_text.delete('\\')
answer.answer_text.delete('\\"')
answer.answer_text
answer.answer_text.split(",")[0].delete('{').slice(1)
answer.answer_text.split(",")[0].delete('{').slice(1,2)
answer.answer_text.split(",")[0].delete('{')
answer.answer_text.split(",")[0].delete('\\')
answer.answer_text.split(",")[0].delete('\')
answer.answer_text.split(",")[0].delete(\)
answer.answer_text.split(",")[0].delete("\")
answer.answer_text.split(",")[0].delete("\\")
answer.answer_text.split(",")[0].delete("{")
answer.answer_text.split(",")[0]
answer.answer_text.split(",").length
answer.answer_text.split(",")
answer.answer_text.each_char {|el| p el}
answer.answer_text
answer.answer_text.split(",")
answer.answer_text
answer.answer_text.split("\r\n")
answer.answer_text.split("\r\n")[0]
answer.answer_text.split("\r\n")
answer.answer_text.split("\r\n").is_a?
answer.answer_text.split("\r\n")[1]
answer.answer_text.split("\r\n")
answer.answer_text.split("\r\n").to_h
answer.answer_text.split("\r\n")
answer.answer_text.to_h
answer.answer_text["1"]
answer.answer_text
answer
answer.answer_text.present?
rules[:presence]
c
answer.errors
c
answer.answer_text.split("\"").join('')
answer.answer_text.split("\"")
answer.answer_text.split("\"").join('')
answer.answer_text.split("\"").join('').to_h
answer.answer_text.split("\"").join('')
answer.answer_text.split("\"")
answer.answer_text.split("\\")
answer.answer_text.delete("\\")
answer.answer_text.delete("\")
answer.answer_text
answer.answer_text.split("\"")
answer_options
answer.answer_text.split("\r\n")
answer.answer_text.split("\"")
answer.answer_text
answer.answer_text.split("\"")
answer.answer_text.split()
options
answer_options.split("\r\n")
answer_options
:answer_text
answer
answer_text
c
options.include?(value)
value
c
rules[:maximum].present?
rules[:minimum].present?
reles[:minimum].present?
c
s
answer.validates_presence_of :answer_text
rules[:presence] == "1"
rules[:presence]
answer
c
@attempt_builder.answers
@attempt_builder.answer_text
@attempt_builder
c
attempt_params
c
@attempt_builder
c
@attempt_builder.params
@attempt_builder
@attempt_builder.save
@attempt_builder.save --trace
@attempt_builder.save
@attempt_builder
c
@attempt_builder.save
c
@attempt_builder
c
s
@attempt_builder
c
params
c
params
c
answer.answer_text.split(Rapidfire.answers_delimiter).each {|value| p value}
answer.answer_text.split("\"").each {|value| p options.include?(value)}
answer.answer_text.split("\"").each {|value| options.include?(value)}
answer.answer_text.split("\"").each {|value| value}
options
answer.answer_text.split(Rapidfire.answers_delimiter).each {|value| value}
end
value
answer.answer_text.split(Rapidfire.answers_delimiter).each do |value|
answer.answer_text.split(Rapidfire.answers_delimiter)
answer.answer_text
answer
c
s
validation_rules
s
rules
s
answer
c
exit
params
:user
user
c
@user
